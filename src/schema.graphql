type Query {
	stock(symbol: String!, outputsize: String, datatype: String, interval: String): Stock,
	symbolSearch(keywords: String!,datatype: String): [SymbolSerachResult],
	cryptocurrencyExchangeRate(from_currency: String!, to_currency: String!, from_symbol: String, to_symbol: String, interval: String): CryptocurrencyExchangeRate

	cryptocurrency(symbol: String!,market:String!): Cryptocurrency



	foreignExchange(from_symbol: String!,to_symbol: String!,interval:String): ForeignExchange
	technical(symbol: String, interval: String, time_period: String, series_type: String): Technical
}


type Company {
	stock(symbol: String, outputsize: String, datatype: String, interval: String): Stock
}

type Stock {
	symbol: String!
}

#type StockQuote
extend type Stock implements StockData {
	#	{
	#	    "01. symbol": "MSFT",
	#	    "02. open": "129.7000",
	#	    "03. high": "130.5152",
	#	    "04. low": "129.0300",
	#	    "05. price": "129.8450",
	#	    "06. volume": "12284431",
	#	    "07. latest trading day": "2019-04-26",
	#	    "08. previous close": "129.1500",
	#	    "09. change": "0.6950",
	#	    "10. change percent": "0.5381%"
	#	}

	# Sock
	symbol: String!,

	# StockData
	open: String,
	high: String,
	low: String,
	price: String,
	volume: String,
#	latest_trading_day => date
#	previous_close => close
	date: String!,
	close: String

	change: String,
	change_percent: String
}

#type StockTimeSeries
extend type Stock implements TimeSeriesMetaData {
	#	{
	#	    "1. Information": "Daily Prices (open, high, low, close) and Volumes",
	#	    "2. Symbol": "MSFT",
	#	    "3. Last Refreshed": "2019-04-26 12:51:19",
	#	    "4. Output Size": "Compact",
	#	    "5. Time Zone": "US/Eastern"
	#	}
	# OR
	#	{
	#        "1. Information": "Intraday (5min) open, high, low, close prices and volume",
	#        "2. Symbol": "MSFT",
	#        "3. Last Refreshed": "2019-04-26 12:45:00",
	#        "4. Interval": "5min",
	#        "5. Output Size": "Compact",
	#        "6. Time Zone": "US/Eastern"
	#    }

	# Sock & TimeSeriesMetaData
	symbol: String!,

	# TimeSeriesMetaData
	information: String,
	updated: String,
#	interval: String, //TODO
	size: String,
	zone: String

	data: [StockData]
}

interface StockData {
	open: String,
	high: String,
	low: String,
	volume: String
	date: String!,
	close: String,
}

interface TimeSeriesMetaData {
	#	{
	#	    "1. Information": "Daily Prices (open, high, low, close) and Volumes",
	#	    "2. Symbol": "MSFT",
	#	    "3. Last Refreshed": "2019-04-26 12:51:19",
	#	    "4. Output Size": "Compact",
	#	    "5. Time Zone": "US/Eastern"
	#	}
	# OR
	#	{
	#        "1. Information": "Intraday (5min) open, high, low, close prices and volume",
	#        "2. Symbol": "MSFT",
	#        "3. Last Refreshed": "2019-04-26 12:45:00",
	#        "4. Interval": "5min",
	#        "5. Output Size": "Compact",
	#        "6. Time Zone": "US/Eastern"
	#    }

	information: String,
	symbol: String,
	updated: String,
#	interval: String, //TODO
	size: String,
	zone: String
}

type StockTimeSeriesData implements StockData {
	#	{
	#	    "1. open": "129.7000",
	#	    "2. high": "130.5152",
	#	    "3. low": "129.0300",
	#	    "4. close": "129.8500",
	#	    "5. volume": "12280289"
	#	}

	# StockData
	open: String,
	high: String,
	low: String,
	volume: String,
	date: String!,
	close: String,
}

type StockAdjustedTimeSeriesData implements StockData {
	#	{
	#	    "1. open": "118.9500",
	#	    "2. high": "131.3700",
	#	    "3. low": "118.1000",
	#	    "4. close": "129.8470",
	#	    "5. adjusted close": "129.8470",
	#	    "6. volume": "379827816",
	#	    "7. dividend amount": "0.0000"
	#	}

	# StockData
	open: String,
	high: String,
	low: String,
	volume: String,
	date: String!,
	close: String,

	adjusted_close: String,
	dividend_amount: String
}

type SymbolSerachResult {
	#	{
	#		"1. symbol": "BA",
	#		"2. name": "The Boeing Company",
	#		"3. type": "Equity",
	#		"4. region": "United States",
	#		"5. marketOpen": "09:30",
	#		"6. marketClose": "16:00",
	#		"7. timezone": "UTC-04",
	#		"8. currency": "USD",
	#		"9. matchScore": "1.0000"
	#	}

	symbol: String,
	name: String,
	type: String,
	region: String,
	marketOpen: String,
	marketClose: String,
	timezone: String,
	currency: String,
	matchScore: Float
}



interface ExchangeRate {
	information: String,
	from_symbol: String,
	to_symbol: String,
	last_refreshed: String,
	#    interval: String, //not all provides
	#    output_size: String, //not all provides
	zone: String
}

type CryptocurrencyExchangeRate implements ExchangeRate {
	#	{ from_currency: 'BTC',
	#	  from_currency_name: 'Bitcoin',
	#	  to_currency: 'USD',
	#	  to_currency_name: 'United States Dollar',
	#	  value: '5462.11000000',
	#	  updated: '2019-04-25 13:43:03',
	#	  zone: 'UTC' }

	from_currency: String
	from_currency_name: String
	to_currency: String
	to_currency_name: String
	value: String
	#    updated: String
	#    zone: String
	data: [ForeignExchangeData]

	information: String,
	from_symbol: String,
	to_symbol: String,
	last_refreshed: String,
	#    interval: String,
	#    output_size: String,
	zone: String
}


type Cryptocurrency {
	exchangeRate(from_currency: String, to_currency: String!): CryptocurrencyExchangeRate

	#        "1. Information": "Daily Prices and Volumes for Digital Currency",
	#        "2. Digital Currency Code": "BTC",
	#        "3. Digital Currency Name": "Bitcoin",
	#        "4. Market Code": "CNY",
	#        "5. Market Name": "Chinese Yuan",
	#        "6. Last Refreshed": "2019-04-24 (end of day)",
	#        "7. Time Zone": "UTC"
	#
	# Polished to:
	#
	#        {
	#            "information": "Daily Prices and Volumes for Digital Currency",
	#            "coin": "BTC",
	#            "coin_name": "Bitcoin",
	#            "market": "CNY",
	#            "market_name": "Chinese Yuan",
	#            "updated": "2019-04-24 (end of day)",
	#            "zone": "UTC"
	#        }
	information: String,
	coin: String,
	coin_name: String,
	market: String,
	market_name: String,
	updated: String,
	zone: String

	data: [CryptocurrencyData]
}

type CryptocurrencyData {
	#        "2019-04-24T00:00:00.000Z": {
	#            "1a. open (CNY)": "37195.55292646",
	#            "1b. open (USD)": "5530.21621307",
	#            "2a. high (CNY)": "37716.62198389",
	#            "2b. high (USD)": "5610.58890896",
	#            "3a. low (CNY)": "36647.78504227",
	#            "3b. low (USD)": "5451.99789652",
	#            "4a. close (CNY)": "36912.34390959",
	#            "4b. close (USD)": "5491.35564724",
	#            "5. volume": "316.09347100",
	#            "6. market cap (USD)": "1735781.66703230"
	#       }
	#
	# Polished to:
	#        {
	#            "date": "2019-04-24T00:00:00.000Z",
	#            "market_open": "37195.55292646",
	#            "usd_open": "5530.21621307",
	#            "market_high": "37716.62198389",
	#            "usd_high": "5610.58890896",
	#            "market_low": "36647.78504227",
	#            "usd_low": "5451.99789652",
	#            "market_close": "36912.34390959",
	#            "usd_close": "5491.35564724",
	#            "volume": "316.09347100",
	#            "cap": "1735781.66703230"
	#        }

	date: String
	market_open: String
	usd_open: String
	market_high: String
	usd_high: String
	market_low: String
	usd_low: String
	market_close: String
	usd_close: String
	volume: String
	cap: String
}



type ForeignExchangeData {
	date: String!,
	open: String,
	high: String,
	low: String,
	close: String,
}

type ForeignExchange implements ExchangeRate {
	information: String,
	from_symbol: String,
	to_symbol: String,
	last_refreshed: String,
	#    interval: String,
	#    output_size: String,
	zone: String

	data: [ForeignExchangeData]
}

type Technical {
	sma(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	ema(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	wma(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	dema(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	tema(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	trima(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	kama(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	mama(symbol: String, interval: String, series_type: String, fastlimit: Float, slowlimit: Float): TypeH,
	vwap(symbol: String, interval: String): TypeH,
	t3(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	macd(symbol: String, interval: String, series_type: String, fastperiod: Float, slowperiod: Float, signalperiod: Float, fastmatype: String, slowmatype: String, signalmatype: String): Type2,
	macdext(symbol: String, interval: String, series_type: String, fastperiod: Float, slowperiod: Float, signalperiod: Float, fastmatype: String, slowmatype: String, signalmatype: String): Type2,
	stoch(symbol: String, interval: String, fastkperiod: String, slowkperiod: String, slowdperiod: String, slowkmatype: String, slowdmatype: String): TypeG,
	stochf(symbol: String, interval: String, fastkperiod: String, fastdperiod: String, fastdmatype: String): TypeF,
	rsi(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	stochrsi(symbol: String, interval: String, time_period: String, series_type: String, fastkperiod: String, fastdperiod: String, fastdmatype: String): TypeE,
	willr(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	adx(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	adxr(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	apo(symbol: String, interval: String, series_type: String, fastperiod: String, slowperiod: String, matype: String): Type3,
	ppo(symbol: String, interval: String, series_type: String, fastperiod: String, slowperiod: String, matype: String): Type3,
	mom(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	bop(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	cci(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	cmo(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	roc(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	rocr(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	aroon(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	aroonosc(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	mfi(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	trix(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	ultosc(symbol: String, interval: String, timeperiod1: String, timeperiod2: String, timeperiod3: String): TypeD,
	dx(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	minus_di(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	plus_di(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	minus_dm(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	plus_dm(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	bbands(symbol: String, interval: String, time_period: String, series_type: String, nbdevup: String, nbdevdn: String, matype: String): TypeA,
	midpoint(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	midprice(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	sar(symbol: String, interval: String, acceleration: String, maximum: String): TypeB,
	trange(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	atr(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	natr(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	ad(symbol: String, interval: String, time_period: String, series_type: String): Type1,
	adosc(symbol: String, interval: String, fastperiod: String, slowperiod: String): TypeC,
	obv(symbol: String, interval: String): Type1,
	ht_trendline(symbol: String, interval: String, series_type: String): Type4,
	ht_sine(symbol: String, interval: String, series_type: String): Type4,
	ht_trendmode(symbol: String, interval: String, series_type: String): Type4,
	ht_dcperiod(symbol: String, interval: String, series_type: String): Type4,
	ht_dcphase(symbol: String, interval: String, series_type: String): Type4,
	ht_dcphasor(symbol: String, interval: String, series_type: String): Type4
}

interface TechnicalMetaData {
	symbol: String,
	indicatior: String,
	last_refreshed: String,
	interval: String,
	time_period: String,
	series_type: String,
	time_zone: String
}
interface TechnicalData {
	date: String,
	value: String
}

type Type1 implements TechnicalMetaData {
	symbol: String,
	indicatior: String,
	last_refreshed: String,
	interval: String,
	time_period: String,
	series_type: String,
	time_zone: String,

	data: [TechnicalData]
}
type Type2{
	a: String
}
type Type3{
	a: String
}
type Type4{
	a: String
}
type TypeA{
	a: String
}
type TypeB{
	a: String
}
type TypeC{
	a: String
}
type TypeD{
	a: String
}
type TypeE{
	a: String
}
type TypeF{
	a: String
}
type TypeG{
	a: String
}
type TypeH{
	a: String
}